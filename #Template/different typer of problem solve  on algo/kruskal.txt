
//uva 1234
#define mx 10005
int parent[mx],n,edges;


struct edge
{
    int u,v,w;
    edge(int a,int b,int c)
    {
       u=a;
       v=b;w=c;
    }

};

bool comp(edge f,edge s)
{
    return f.w>s.w;
}

vector<edge>vec;
int find(int p)
{
    if(parent[p]==p)
        return p;
    else
        return parent[p]=find(parent[p]);
}

int kruskal()
{
    sort(vec.begin(),vec.end(),comp);
    for(int i=1; i<=n; i++)
    {
        parent[i]=i;
    }
    int xx,yy;
    int cnt=0;
    for(int i=0; i<vec.size(); i++)
    {
        xx=find(vec[i].u);
        yy=find(vec[i].v);
        if(xx!=yy)
        {
            parent[yy]=xx;

        }
        else
        {
            cnt+=vec[i].w;
            //cout<<"cnt "<<cnt<<endl;
        }
    }
    vec.clear();
    return cnt;
}
int main()
{
    //READ
    TEST_CASE
    {
        sf("%d %d",&n,&edges);
        int uu,vv,ww;
        for(int i=0; i<edges; i++)
        {

            cin>>uu>>vv>>ww;
            vec.pb(edge(uu,vv,ww));
        }
        //reverse(one,one+edges);
        pf("%d\n",kruskal());

    }

    return 0;
}