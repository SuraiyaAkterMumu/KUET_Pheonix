/*----------------------Graph Moves----------------*/
//const int fx[]={+1,-1,+0,+0};
//const int fy[]={+0,+0,+1,-1};
//const int fx[]={+0,+0,+1,-1,-1,+1,-1,+1};   // Kings Move
//const int fy[]={-1,+1,+0,+0,+1,+1,-1,-1};  // Kings Move
//const int fx[]={-2, -2, -1, -1,  1,  1,  2,  2};  // Knights Move
//const int fy[]={-1,  1, -2,  2, -2,  2, -1,  1}; // Knights Move
//const int fx[] = {2, -2, 1, 1, -1, -1} ;
//const int fy[] = {0,0,1,-1,1,-1};             // Hexagonal Direction
 //int day[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; 
/*------------------------------------------------*/


******************************************************************
/********************************dfs******************************
******************************************************************
void dfs(ll start)
{
    cnt++;
    for(ll i=0; i<adj[start].size(); i++)
    {
	int v=adj[start][i];
        if(!visited[v])
        {
            visited[v]=1;
            dfs(v);
        }
    }

}
******************************************************************
********************************bfs normal************************
******************************************************************
 

vector<int>adj[mx];
int visited[mx];
int cost[mx];

//void bfs(int source)
//{
//
////    cout<<"bfs"<<endl;
//    visited[source]=1;
//    cnt++;
//    queue<int>q;
//    q.push(source);
//    while(!q.empty())
//    {
//        int u=q.front();
//        q.pop();
//        for(int i=0; i<adj[u].size(); i++)
//        {
//            int  v=adj[u][i];
//
//            if(visited[v]==0)
//            {
//                visited[v]=1;
//                q.push(v);
//                //cnt++;
//            }
//        }
//    }
//}
*************************cycle find(undirected)*******************************
#define ll long long int
#define mx 100005
vector<int>adj[mx],ans;
bool vis[mx];
int n,m,p[mx];
 
void cycle(int u,int pu=-1){//here pu means parent
      p[u]=pu;
      vis[u] = 1;
      for(int v:adj[u]){
            if(v==pu)
                  continue;
            if(vis[v]){
                 int u2 = u;
                 while(u^v){
                     ans.push_back(u);
                     u = p[u];
                    ///same hoile u^v=0 hoile
                 }
                 ans.push_back(v);
                 ans.push_back(u2);
                 cout<<ans.size()<<endl;
                 for(int a:ans)
                    cout << a+1 <<" ";
                 exit(0);
            }else{
                dfs(v,u);
            }
      }
 
}
*************************cycle(directed)**************************

 #define ll long long int
#define mx 100005
vector<int>adj[mx],ans;
bool vis[mx];
int color[mx];
int n,m,p[mx];
 
void dfs(int u,int pu=-1){//here pu means parent
      p[u]=pu;
      vis[u] = 1;
      for(int v:adj[u]){
            if(vis[v] == 1 && color[v]!=2){
                 int u2 = u;
                 while(u^v){
                     ans.push_back(u);
                     u = p[u];
                    ///same hoile u^v=0 hoile
                 }
                 ans.push_back(v);
                 ans.push_back(u2);
                 cout<<ans.size()<<endl;
                 reverse(ans.begin(),ans.end());
                 for(int a:ans)
                    cout << a+1 <<" ";
                 exit(0);
            }else{
                dfs(v,u);
            }
      }
      color[u]=2;
 
}
*************************path print*******************************
CSESLabyrinth
 
****************************************************************** 
/-----------------bfs with move-----------------
-------//bombs no there mines//uva--------------
******************************************************************
int R,C;

void bfs(int sx,int sy){
    int ux,uy,vx,vy;
    visited[sx][sy]=true;
    dis[sx][sy]=0;
    queue<int>q;
    q.push(sx);
    q.push(sy);
    while(!q.empty())
    {
        ux=q.front();
        q.pop();
        uy=q.front();
        q.pop();
        for(int i=0;i<4;i++){
            vx=ux+fx[i];
            vy=uy+fy[i];
            if((vx>=0&&vx<=R)&&(vy>=0&&vy<=C)&& adj[vx][vy]==0){
                if(!visited[vx][vy]&&!dis[vx][vy]){
                    visited[vx][vy]=true;
                    dis[vx][vy]=dis[ux][uy]+1;
                    q.push(vx);
                    q.push(vy);
                }
            }
        }
    }
}
******************************************************************
-----------------------------dijkstra-----------------------------
******************************************************************

//vector<pii>adj[mx];
//int visited[mx];
//int dis[mx];
int parent[mx];
void path(int n)
{
	if(n==1)
	{
            cout<<"1";
	    return;
	}
	path(parent[n]);
	cout<<" "<<n;
}
void dijkstra(int s)
{
    CLR(visited);
    for(int i=0;i<100005;i++) dis[i]=inf;
    priority_queue<pii,vector<pii>,greater<pii>>pq;
    dis[s]=0;
    pq.push({dis[s],s});
    
    while(!pq.empty())
    {
        int u=pq.top().second; pq.pop();
        if(visited[u]) continue;
        visited[u]=1;
        for(auto x:adj[u]){
'

            int vx=x.first;
            int vy=x.second;
            if(dis[vx]>dis[u]+vy)
            {
                dis[vx]=dis[u]+vy;
                pq.push({dis[vx],vx});
		parent[vx]=u;  ///path print korte lgbe
            }
        }
    }
} 

*****************************************************************
--------------------DSU------------------------------------------
*****************************************************************
 
#define mx 12505
int parent[mx],n,edges;
pair<lli,pair<int,int>>pi[mx];
 
void set_parent()
{
    for(int i=1; i<=n; i++)
    {
        parent[i]=i;
    }

}

int find_parent(int r)
{
    return (parent[r]==r)?r:find_parent(parent[r]);
}

void unionm(int x,int y)
{
    int u=find_parent(x);
    int v=find_parent(y);
    if(u!=v)
    {
        parent[v]=u;
    }
}

*****************************************************************
************************MST(kruskal)****************************
*****************************************************************


#define mx 10005
int parent[mx],n,edges;


struct edge
{
    int u,v,w;
    edge(int a,int b,int c)
    {
       u=a;
       v=b;w=c;
    }

};

bool comp(edge f,edge s)
{
    return f.w>s.w;
}

vector<edge>vec;
int find(int p)
{
    if(parent[p]==p)
        return p;
    else
        return parent[p]=find(parent[p]);
}

int kruskal()
{
    sort(vec.begin(),vec.end(),comp);
    for(int i=1; i<=n; i++)
    {
        parent[i]=i;
    }
    int xx,yy;
    int cnt=0;
    for(int i=0; i<vec.size(); i++)
    {
        xx=find(vec[i].u);
        yy=find(vec[i].v);
        if(xx!=yy)
        {
            parent[yy]=xx;

        }
        else
        {
            cnt+=vec[i].w;
            //cout<<"cnt "<<cnt<<endl;
        }
    }
    vec.clear();
    return cnt;
}
******************************************************************
-----------------floadwarshal-----------------------------
******************************************************************
dis[505][505];
int main(){
 memset(dis,0x3F,sizeof(dis));
      for(int i=0;i<m;i++){
        ll u,v,w;
        cin>>u>>v>>w;
        --u,--v;
        dis[u][v]=min(dis[u][v],w);
        dis[v][u]= min(dis[v][u],w);


      }
      for(int i=0;i<n;++i) dis[i][i]=0;
      for(int k=0;k<n;++k){
          for(int i=0;i<n;++i){
              for(int j=0;j<n;++j)
                dis[i][j]=min(dis[i][j],dis[i][k]+dis[k][j]);
          }
      }
}

******************************************************************
-----------------BellmanFord------------------------------O(node*edge)
******************************************************************
struct edge
{
    int a, b;
    ll cost;
};
 
int n, m, v=1;
vector<edge> e;
const ll INF = 1e9;
 
void bellmanford_and_its_path()
{
    vector<ll> d (n+1, INF);
    d[v] = 0;
    vector<int> pa (n+1);
    int x=-1;
    for (int i=0; i<n; ++i)
    {
        x = -1;
        for (edge p:e)
        {
 
            if (d[p.b] > d[p.a] + p.cost /*&& d[e[j].b]<INF*/ )
            {
                d[p.b] = d[p.a] + p.cost;
                pa[p.b] = p.a;
                x = p.b;
               //DBG
            }
        }
    }
 
    if (x == -1)
        cout << "NO";
    else
    {
        int y = x;
        for (int i=0; i<n; ++i)
            y = pa[y];
 
        vector<int> path;
        for (int cur=y; ; cur=pa[cur])
        {
            path.push_back (cur);
            if (cur == y && path.size() > 1)
                break;
        }
        reverse (path.begin(), path.end());
        cout<<"YES\n";
        for (size_t i=0; i<path.size(); ++i)
            cout << path[i] << " ";
    }
 
******************************************************************
*********************articulation_bridge**************************
******************************************************************

vector<int>adj[mx];
int visited[mx],node[mx],low[mx],parent[mx],disTime[mx],discover_time,root;
set<pii>s;

void articulation_bridge(int u)
{
    visited[u]=1;
    int cnt=0;
    disTime[u]=low[u]=++discover_time;
    for(int i=0; i<adj[u].size(); i++)
    {
        int v=adj[u][i];
        if(parent[u]==v)
            continue;
        if(visited[v])
            low[u]=min(low[u],disTime[v]); //back edge thakle
        else
        {
            parent[v]=u;
            articulation_point(v);
            low[u]=min(low[u],low[v]);
            if(disTime[u]<low[v])
            {
                s.insert({min(u,v),max(u,v)});
                //cout<<u<<" "<<v<<endl;
                //node[u]=1;
            }

        }


    }


}

int main()
{
        s.clear();
        int node;
        sf("%d",&node);
        for(int i=1; i<=node; i++)
        {
            int u,n;
            char c1,c2;
            cin>>u;
            getchar();
            cin>>c1>>n>>c2;
            for(int nn=1; nn<=n; nn++)
            {
                int v;
                cin>>v;
                adj[u].pb(v);
            }
        }
        for(int i=0; i<node; i++)
        {
            root=i;
            if(!visited[i])
            {
                articulation_point(i);
            }
        }
}
******************************************************************
********************articulation_point****************************
******************************************************************
vector<int>adj[mx];
int visited[mx],node[mx],low[mx],parent[mx],disTime[mx],discover_time,root;


void articulation_point(int u)
{
    visited[u]=1;
    int cnt=0;
    disTime[u]=low[u]=++discover_time;
    for(int i=0; i<adj[u].size(); i++)
    {
        int v=adj[u][i];
        if(parent[u]==v)
            continue;
        if(visited[v]) low[u]=min(low[u],disTime[v]); //back edge thakle
         else
        {
            parent[v]=u;
            articulation_point(v);
            low[u]=min(low[u],low[v]);
            if(disTime[u]<=low[v] && u!=root)
            {
                node[u]=1;
            }
           cnt++;
        }


    }
    if(cnt>1 && u==root)
        node[u]=1;

}

int main()
{
        memset(visited,0,sizeof visited);
        memset(node,0,sizeof node);
        memset(low,0,sizeof low);
        memset(disTime,0,sizeof disTime);
        discover_time=0;
        for(int i=0; i<mx; i++)
            adj[i].clear();
        int edge,n;
        sf("%d%d",&n,&edge);
        for(int i=1; i<=edge; i++)
        {
            int u,v;
           sf("%d%d",&u,&v);
            adj[u].pb(v);
            adj[v].pb(u);
        }
        root=1;
        articulation_point(1);
}

******************************************************************
*******************LCA for different root*************************
******************************************************************
#define mx 200005
int L[mx];
int P[mx][50];
int T[mx];
vector<int>g[mx];
void dfs(int from,int u,int dep)
{
    T[u]=from;
    L[u]=dep;
    for(int i=0; i<(int)g[u].size(); i++)
    {
        int v=g[u][i];
        if(v==from)
            continue;
        dfs(u,v,dep+1);
    }
}

int lca_query(int N, int p, int q)
{
    int tmp, log, i;

    if (L[p] < L[q])
        tmp = p, p = q, q = tmp;

    log=1;
    while(1)
    {
        int next=log+1;
        if((1<<next)>L[p])
            break;
        log++;

    }

    for (i = log; i >= 0; i--)
        if (L[p] - (1 << i) >= L[q])
            p = P[p][i];

    if (p == q)
        return p;

    for (i = log; i >= 0; i--)
        if (P[p][i] != -1 && P[p][i] != P[q][i])
            p = P[p][i], q = P[q][i];

    return T[p];
}

void lca_init(int N)
{
    memset (P,-1,sizeof(P));
    int i, j;
    for (i = 0; i < N; i++)
        P[i][0] = T[i];

    for (j = 1; 1 << j < N; j++)
        for (i = 0; i < N; i++)
            if (P[i][j - 1] != -1)
                P[i][j] = P[P[i][j - 1]][j - 1];
}

int main()
{

    for(int i=0; i<=mx; i++)
        g[i].clear();
    int n;
    sf("%d",&n);
    for(int i=1; i<n; i++)
    {
        int u,v;
        sf("%d %d",&u,&v);
        g[u-1].pb(v-1);
        g[v-1].pb(u-1);
    }

    dfs (0, 0,0);
    lca_init(n);
    int q;
    sf("%d",&q);
    while(q--)
    {
        int r,a,b,ans;
        scanf("%d %d %d",&r,&a,&b);
          
            int f=lca_query(n,r-1,a-1);
            int s=lca_query(n,r-1,b-1);
            int t=lca_query(n,a-1,b-1);
            if(f!=s && f!=t && s==t)
            {
                ans=f;
            }
            else if(s!=f && s!=t && f==t)
                ans=s;
            else if(t!=f && t!=s && f==s)
                ans=t;
            else ans=t;
        
        printf("%d\n",ans+1);
    }


}


------------------------------------------------------
----------------------topsort-------------------------
------------------------------------------------------
#define mx 100005
int n,m,f=0;
vector<int>adj[mx],arr;
bool vis[mx],finish[mx];
 
void topsort(int s){
    vis[s]=true;
 
    for(int v:adj[s])
    {
        if( !vis[v])
            topsort(v);
        else if(vis[v] && finish[v]==0) f=1;
 
    }
    finish[s]=1;
    arr.push_back(s+1);
 
 
}

------------------------------------------------------
------------single source multiple shortest path------
------------------------------------------------------
#define int long long int
#define pii pair<int,int>
const int inf=9e15;
int node,edge,k;
vector<pair<int,int>>adj[200005];
// bool vis[200005]; // as a node can be visited many time
vector<vector<int>>dis;
 
void dijkstra(int s)
{
    dis.resize(200005);
    for(int i=0;i<200005;i++) 
    {
        dis[i].resize(k);
        for(int j=0;j<k;j++){
            dis[i][j]=inf;
        }
    }
    priority_queue<pii,vector<pii>,greater<pii>>pq;
 
    pq.push({0,s});
    
    while(!pq.empty())
    {
        int u=pq.top().second;
        int d= pq.top().first;
         pq.pop();
        
        if(dis[u][k-1]<d) continue;
        for(auto x:adj[u]){
            int vx=x.first;
            int vy=x.second;
            if(dis[vx][k-1]>d+vy)
            {
                dis[vx][k-1]=d+vy;
                
                pq.push({dis[vx][k-1],vx});
                sort(dis[vx].begin(),dis[vx].end());
		
            }
        }
    }
} 

------------------------------------------------------


