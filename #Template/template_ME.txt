#include<bits/stdc++.h>
#include<iostream>
#include<math.h>
#include<vector>
#include<set>
#include<queue>
#include<algorithm>
#include<cstring>    //for memset
using namespace std;

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

#define lli                      int long long
#define ull                      unsigned long long
#define ld                       long double
#define pi                       acos(-1)
#define pb                       push_back
#define pbk                      pop_back
#define mp                       make_pair
#define ff                       first
#define ss                       second
#define pii                      pair<int,int>
#define gcd(a,b)                 __gcd(a,b)
#define lcm(a,b)                (a/gcd(a,b))*b
#define READ                     freopen("in.txt","r",stdin);
#define WRITE                    freopen("outer.txt","w",stdout);
#define sort(t)                  sort(t.begin(),t.end())
#define mem(a,b)                 memset(a,b,sizeof a)
#define TEST_CASE(t)             for(int z=1;z<=t;z++)
#define PRINT_CASE               printf("Case %d: ",z)
#define LINE_PRINT_CASE          printf("Case %d:\n",z)
#define ordered_set              tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>
#define sf                       scanf
#define pf                       printf
#define dist(ax,ay,bx,by)        sqrt((ax-bx)*(ax-bx)+(ay-by)*(ay-by))
#define EQUAL_RANGE(set)    pair<set<int>::const_iterator,set<int>::const_iterator> ret; ret=myset.equal_range(30);
#define MX                       100003
#define inf                      10000000000000000+7
#define M                        1000000002
#define MINI                     -1000000003
//const int fx[]={+1,-1,+0,+0};
//const int fy[]={+0,+0,+1,-1};
//const int fx[]={+0,+0,+1,-1,-1,+1,-1,+1};   // Kings Move
//const int fy[]={-1,+1,+0,+0,+1,+1,-1,-1};  // Kings Move

//int kx[]={+2,+2,-2,-2,+1,+1,-1,-1};     //Knights move
//int ky[]={+1,-1,+1,-1,+2,-2,+2,-2};     //Knights move


//#define for(i,a,n)    for(int i=a;i<n;i++)
//it=myset.find(20);
//int a[8]= {0,0,-1,1,-1,1,-1,1};
//int b[8]= {-1,1,0,0,-1,1,1  ,-1};
//find_by_order(k) – ফাংশনটি kth ordered element এর একটা পয়েন্টার রিটার্ন করে। অর্থাৎ তুমি চাইলেই kth ইন্ডেক্সে কি আছে, সেটা জেনে ফেলতে পারছো!
//order_of_key(x) – ফাংশনটি x এলিমেন্টটা কোন পজিশনে আছে সেটা বলে দেয়।



using namespace std;

/*----------------------Graph Moves----------------*/
//const int fx[]={+1,-1,+0,+0};
//const int fy[]={+0,+0,+1,-1};
//const int fx[]={+0,+0,+1,-1,-1,+1,-1,+1};   // Kings Move
//const int fy[]={-1,+1,+0,+0,+1,+1,-1,-1};  // Kings Move
//const int fx[]={-2, -2, -1, -1,  1,  1,  2,  2};  // Knights Move
//const int fy[]={-1,  1, -2,  2, -2,  2, -1,  1}; // Knights Move
//const int fx[] = {2, -2, 1, 1, -1, -1} ;
//const int fy[] = {0,0,1,-1,1,-1};             // Hexagonal Direction
 //int day[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; 
/*------------------------------------------------*/

/*-----------------------Bitmask------------------*/
//int Set(int N,int pos){return N=N | (1<<pos);}
//int reset(int N,int pos){return N= N & ~(1<<pos);}
//bool check(int N,int pos){return (bool)(N & (1<<pos));}
/----------------------------------------------------------*/

********************************************************
bool is_Power_Of_Two(unsigned int x)
{
  return x && !(x & (x – 1));
}
*****************************************************

/*---------------------pair sort according second element---------------------------*/
bool sortbysec(pair<int,int> &a, 
              pair<int,int> &b) 
{ 
    return (a.second < b.second); 
}

/---------------------structure sort-------------------------------------------------*/
point a[10];   //point type array
bool compair(point a,point b)   //here point is a struct type data type //
{
        return a.x>b.x;
}
//just call
sort(a,a+10,compair);

/-----------------------------------------------------------------------------------
 ----------------------///


//==========================dp========================
/*int dp[400][400];
int arr[400][400];
int n;
int call(int i,int j)
{
    int ret;
    if(i>n) return 0;
    if(dp[i][j]!=-1) return dp[i][j];
    ret= arr[i][j]+max(call(i+1,j),call(i+1,j+1));
    return dp[i][j]=ret;
}*/

************************************************
----------------knapsak(iterative)----------------------
**************************************************
ll int weight[2005];
ll int cost[2005];

ll int dp(int w,int n)
{
    ll int k[n+1][w+1];
    for(int i=0;i<=n;i++)
    {
        for(int j=0;j<=w;j++)
        {
            if(i==0 || j==0)
                k[i][j]=0;
            else if(j-weight[i]>=0)
             k[i][j]=max(cost[i]+k[i-1][j-weight[i]],k[i-1][j]);
            else
                k[i][j]=k[i-1][j];
        }
    }
    return k[n][w];
}
*****************************************************************
---------coin change(infinite)---------------
************************************************
int coin[111],n;

int call(int amount)
{

    int dp[n][amount+1];
    for(int j=1; j<=amount; j++)
        {
                if(j%coin[0]==0) dp[0][j]=1;
                else dp[0][j]=0;
        }
    for(int i=1; i<n; i++)
    {
        for(int j=0; j<=amount; j++)
        {

            if(j==0) dp[i][j]=1;
            else if(coin[i]>j)
            {
                dp[i][j]=(dp[i-1][j])%mod;
            }
            else
            {
                dp[i][j]=(dp[i-1][j]+dp[i][j-coin[i]])%mod;
            }
            //cout<<dp[i][j];
        }
    }
}
****************************************
---------coin change(fixed ammount)-------
*****************************************
int call(int amount,int i)
{

    if(i>=n)
    {
        if(amount==0)
            return 1;
        else
            return 0;
    }
    if(dp[amount][i]!=-1)
        return dp[amount][i];
    ll rep1=0,rep2=0;
    for(int ii=1; ii<=n_coin[i]; ii++)
    {
        if((amount - coin[i]*ii>=0))
            rep1+=call(amount-coin[i]*ii,i+1);
    }
    rep2+=call(amount,i+1);
    return dp[amount][i]=(rep1%mod+rep2%mod)%mod;
}

***************************************************
--------------------dp(ncr)--------------------------
*****************************************************

lli dp[mx][mx];
lli nCr(lli n,lli r)
{
	if(r==1)
	{
		return n;	
	}
	if(n==r)
	{
		return 1;
	}
	if(dp[n][r]!=-1)
	{
		return dp[n][m];
	}
	else
	{
		dp[n][r]=nCr(n-1,r)+nCr(n-1,r-1);
		return dp[n][r];
	}
 
}



 



----------------------------------------------------------- 

// Function to find number of subarrays
// with sum exactly equal to k.
lli findSubarraySum(vector<int>arr, int n, lli sum)
{
	/// STL map to store number of subarrays
	// starting from index zero having
	// particular value of sum.
	unordered_map<lli, lli> prevSum;

	lli res = 0;

	// Sum of elements so far.
	lli currsum = 0;

	for (int i = 0; i < n; i++) {

		/// Add current element to sum so far.
		currsum += arr[i];

		// If currsum is equal to desired sum,
		// then a new subarray is found. So
		// increase count of subarrays.
		if (currsum == sum)
			res++;

		// currsum exceeds given sum by currsum
		// - sum. Find number of subarrays having
		// this sum and exclude those subarrays
		// from currsum by increasing count by
		// same amount.
		if (prevSum.find(currsum - sum) !=prevSum.end())
			res += (prevSum[currsum - sum]);


		// Add currsum value to count of
		// different values of sum.
		prevSum[currsum]++;
	}

	return res;
}


 
int main()
{ #ifndef ONLINE_JUDGE
    READ
    #else
    // online submission
    #endif
	ios_base::sync_with_stdio(false); cin.tie(0);cout.tie(0);	
}